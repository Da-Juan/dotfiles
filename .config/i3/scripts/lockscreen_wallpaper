#!/usr/bin/env python3
"""Build a wallpaper according to screen sizes."""
import logging
import os
import re
import subprocess
import sys
import time
from typing import Tuple

from PIL import Image

OUTPUT_DIR = os.path.join(os.path.expanduser("~"), ".cache")
WALLPAPER_FILE = os.path.join(OUTPUT_DIR, "lock_wallpaper.png")
SIZES_CACHE_FILE = os.path.join(OUTPUT_DIR, "lock_wallpaper.sizes")
# Keep wallpaper for 24 hours
WALLPAPER_TTL = 24 * 60 * 60


def get_connected_screens_sizes() -> Tuple[Tuple[int, int]]:
    """
    Get connected screens sizes.

    Use xrandr to get connected screens informations.

    Returns:
        The screens resolutions from left to right.

    """
    xrandr = subprocess.Popen("xrandr", stdout=subprocess.PIPE)
    screens = []
    try:
        connected_screens = subprocess.check_output(
            ["grep", " connected"],
            stdin=xrandr.stdout
        )
    except (subprocess.CalledProcessError, FileNotFoundError):
        raise
    finally:
        xrandr.stdout.close()
    sizes_regex = re.compile(r".* ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+) .*")
    i = 0
    for screen in connected_screens.decode("utf-8").split("\n"):
        match = sizes_regex.match(screen)
        if match:
            screens.append([int(m) for m in match.groups()])
            i += 1
    if 0 in [s[1] for s in screens]:
        raise ValueError
    # sort screens from left to right according to X position
    return tuple((s[0], s[1]) for s in sorted(screens, key=lambda x: x[2]))


def ratio(width: int, height: int) -> float:
    """Return the ratio between width and height."""
    return width/height


def resize(source_image: Image.Image, size: Tuple[int, int]) -> Image.Image:
    """
    Resize an image and maintain aspect ratio.

    Args:
        source_image: The source image.
        size: The size of the image to return.

    Returns:
        The resized image.

    """
    source_image_ratio = ratio(*source_image.size)
    if source_image_ratio != ratio(*size):
        size = (size[0], int(size[0] / source_image_ratio))
    new_image = source_image.resize(size)
    return new_image


def build_wallpaper(source_image: Image.Image, screen_sizes: Tuple[Tuple[int, int]]) -> None:
    """
    Build the wallpaper image.

    Args:
        source_image: The source image.
        screen_sizes: The screens resolutions from left to right.

    """
    wallpaper_size = source_image.size

    width = sum([s[0] for s in screen_sizes])
    height = int(sorted(screen_sizes, key=lambda x: x[1], reverse=True)[0][1])
    new_image = Image.new("RGB", (width, height), color=0)
    left = 0
    for screen_size in screen_sizes:
        width += screen_size[0]
        if wallpaper_size == screen_size:
            new_image.paste(source_image, (left, 0))
        else:
            new_image.paste(
                resize(source_image, (screen_size[0], height)),
                (left, 0)
            )
        left += screen_size[0]
    source_image.close()

    with open(WALLPAPER_FILE, mode="wb") as new_image_file:
        new_image.save(new_image_file, compress_level=4)
    new_image.close()
    with open(SIZES_CACHE_FILE, mode="w") as cache_file:
        cache_file.write(str(screen_sizes))
    print(WALLPAPER_FILE)


def is_rebuild_needed(screen_sizes: Tuple[Tuple[int, int]]) -> bool:
    """
    Check if the wallpaper needs to be rebuilt.

    Rebuild the wallpaper only every WALLPAPER_TTL
    or if screen configuration has changed.

    Args:
        screen_sizes: The screens resolutions from left to right.

    Returns:
        True if the rebuild is needed, False otherwise.
    """
    if not os.path.isfile(WALLPAPER_FILE):
        return True
    else:
        if time.time() >= os.stat(WALLPAPER_FILE).st_mtime + WALLPAPER_TTL:
            return True

    if not os.path.isfile(SIZES_CACHE_FILE):
        return True
    else:
        with open(SIZES_CACHE_FILE, mode="r") as cache_file:
            previous_config = cache_file.read().strip("\n")
        if previous_config != str(screen_sizes):
            return True

    return False


if __name__ == "__main__":
    logger = logging.getLogger(__name__)

    try:
        screen_sizes = get_connected_screens_sizes()
    except (FileNotFoundError, subprocess.CalledProcessError) as exception:
        logger.error(exception)
        sys.exit(1)
    except ValueError:
        logger.error("Error while getting screens resolutions.")
        sys.exit(1)

    if not is_rebuild_needed(screen_sizes):
        print(WALLPAPER_FILE)
        sys.exit(0)

    if len(sys.argv) <= 1:
        logger.error("Please provide an image path as argument.")
        sys.exit(1)
    wallpaper = sys.argv[1]
    try:
        source_image = Image.open(wallpaper)
    except (FileNotFoundError, PermissionError) as exception:
        logger.error(exception)
        sys.exit(1)

    if not os.access(os.path.dirname(WALLPAPER_FILE), os.W_OK):
        logger.error("Unable to write %s", WALLPAPER_FILE)
        sys.exit(1)

    build_wallpaper(source_image, screen_sizes)
