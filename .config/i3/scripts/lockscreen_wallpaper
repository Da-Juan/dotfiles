#!/usr/bin/env python3
"""Build a wallpaper according to screen sizes."""
import logging
import os
import re
import subprocess
import sys
import time
from typing import List, Tuple

from PIL import Image

OUTPUT_DIR = os.path.join(os.path.expanduser("~"), ".cache")
WALLPAPER_FILE = os.path.join(OUTPUT_DIR, "lock_wallpaper.png")
SIZES_CACHE_FILE = os.path.join(OUTPUT_DIR, "lock_wallpaper.sizes")
# Keep wallpaper for 24 hours
WALLPAPER_TTL = 24 * 60 * 60


class Screen:
    """
    Screen class.

    Args:
        width : The screen's width.
        height : The screen's height.
        left : The screen's left position.
        top : The screen's top postition.

    """

    def __init__(self, width: int, height: int, left: int, top: int):
        """Initialize the Screen object with the given options."""
        self.width = width
        self.height = height
        self.left = left
        self.top = top


def get_connected_screens_infos() -> List[Screen]:
    """
    Get connected screens geometry.

    Use xrandr to get connected screens informations.

    Returns:
        The screens resolutions and their position.
        width, height, left, top

    """
    xrandr = subprocess.Popen("xrandr", stdout=subprocess.PIPE)
    screens = []
    try:
        connected_screens = subprocess.check_output(
            ["grep", " connected"], stdin=xrandr.stdout
        )
    except (subprocess.CalledProcessError, FileNotFoundError):
        raise
    finally:
        xrandr.stdout.close()
    sizes_regex = re.compile(
        r".* (?P<width>[0-9]+)x(?P<height>[0-9]+)\+(?P<left>[0-9]+)\+(?P<top>[0-9]+) .*"
    )
    for screen in connected_screens.decode("utf-8").split("\n"):
        match = sizes_regex.match(screen)
        if match:
            screens.append(
                Screen(
                    int(match.group("width")),
                    int(match.group("height")),
                    int(match.group("left")),
                    int(match.group("top")),
                )
            )
    if 0 in [s.height for s in screens]:
        raise ValueError
    return screens


def ratio(width: int, height: int) -> float:
    """Return the ratio between width and height."""
    return width / height


def resize(source_image: Image.Image, size: Tuple[int, int]) -> Image.Image:
    """
    Resize an image and maintain aspect ratio.

    Args:
        source_image: The source image.
        size: The size of the image to return.

    Returns:
        The resized image.

    """
    source_image_ratio = ratio(*source_image.size)
    screen_ratio = ratio(*size)
    if screen_ratio >= 1:
        if source_image_ratio != screen_ratio:
            size = (size[0], int(size[0] / source_image_ratio))
        new_image = source_image.resize(size)
    else:
        new_size = (int(size[1] * ratio(*size[::-1])), size[1])
        temp_image = source_image.resize(new_size)
        new_image = temp_image.crop(
            (
                int(temp_image.size[0] / 2 - size[0] / 2),
                0,
                int(temp_image.size[0] / 2 + size[0] / 2),
                size[1],
            )
        )
    return new_image


def compute_virtual_screen_size(screen_sizes: List[Screen]) -> Tuple[int, int]:
    """
    Determine the virtual screen resolution.

    Args:
        screen_sizes: The screens resolutions and position.

    Returns:
        The width and height of the virtual screen.

    """
    x_furthest_screen = sorted(
        screen_sizes, key=lambda x: x.left + x.width, reverse=True
    )[0]
    width = x_furthest_screen.left + x_furthest_screen.width
    y_furthest_screen = sorted(
        screen_sizes, key=lambda x: x.top + x.height, reverse=True
    )[0]
    height = y_furthest_screen.top + y_furthest_screen.height
    return (width, height)


def build_wallpaper(source_image: Image.Image, screen_sizes: List[Screen]) -> None:
    """
    Build the wallpaper image.

    Args:
        source_image: The source image.
        screen_sizes: The screens resolutions and position.

    """
    original_size = source_image.size

    new_image = Image.new("RGB", compute_virtual_screen_size(screen_sizes), color=0)
    for screen in screen_sizes:
        if original_size == (screen.width, screen.height):
            new_image.paste(source_image, (screen.left, screen.top))
        else:
            new_image.paste(
                resize(source_image, (screen.width, screen.height)),
                (screen.left, screen.top),
            )
    source_image.close()

    with open(WALLPAPER_FILE, mode="wb") as new_image_file:
        new_image.save(new_image_file, compress_level=4)
    new_image.close()
    with open(SIZES_CACHE_FILE, mode="w") as cache_file:
        cache_file.write(
            str(sorted([(s.width, s.height, s.left, s.top) for s in screen_sizes]))
        )
    print(WALLPAPER_FILE)


def is_rebuild_needed(screen_sizes: List[Tuple[int, int, int, int]]) -> bool:
    """
    Check if the wallpaper needs to be rebuilt.

    Rebuild the wallpaper only every WALLPAPER_TTL
    or if screen configuration has changed.

    Args:
        screen_sizes: The screens resolutions from left to right.

    Returns:
        True if the rebuild is needed, False otherwise.

    """
    if not os.path.isfile(WALLPAPER_FILE):
        return True
    else:
        if time.time() >= os.stat(WALLPAPER_FILE).st_mtime + WALLPAPER_TTL:
            return True

    if not os.path.isfile(SIZES_CACHE_FILE):
        return True
    else:
        with open(SIZES_CACHE_FILE, mode="r") as cache_file:
            previous_config = cache_file.read().strip("\n")
        if previous_config != str(
            sorted([(s.width, s.height, s.left, s.top) for s in screen_sizes])
        ):
            return True

    return False


if __name__ == "__main__":
    logger = logging.getLogger(__name__)

    try:
        screen_sizes = get_connected_screens_infos()
    except (FileNotFoundError, subprocess.CalledProcessError) as exception:
        logger.error(exception)
        sys.exit(1)
    except ValueError:
        logger.error("Error while getting screens resolutions.")
        sys.exit(1)

    if not is_rebuild_needed(screen_sizes):
        print(WALLPAPER_FILE)
        sys.exit(0)

    if len(sys.argv) <= 1:
        logger.error("Please provide an image path as argument.")
        sys.exit(1)
    wallpaper = sys.argv[1]
    try:
        source_image = Image.open(wallpaper)
    except (FileNotFoundError, PermissionError) as exception:
        logger.error(exception)
        sys.exit(1)

    if not os.access(os.path.dirname(WALLPAPER_FILE), os.W_OK):
        logger.error("Unable to write %s", WALLPAPER_FILE)
        sys.exit(1)

    build_wallpaper(source_image, screen_sizes)
